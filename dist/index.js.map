{"version":3,"file":"index.js","sources":["../src/mapping.ts","../src/comparator.ts","../src/set.ts","../src/fold.ts","../src/unfold.ts","../src/get.ts","../src/unset.ts","../src/has.ts"],"sourcesContent":["/* eslint-disable eqeqeq */\n\n// default strict = eq.false;\n// default loose = eq.false;\n// default structure = eq.false;\n// default diff =eq.diffValue\n\n// проверить работу, посде доделать адресно для каждого типа\n// так чтобы знать какой параметр каким приходит\n// чтобы было меньше проверок\n\nimport { diffLines } from 'diff'\nimport { EqualityIput } from './comparator'\n\nexport function cmp(eq: EqualityIput) {\n  return {\n    Boolean: {\n      Boolean: {\n        strict(a: boolean, b: boolean) {\n          return a === b\n        },\n        loose(a: boolean, b: boolean) {\n          return a == b\n        },\n        structure: eq.true,\n      },\n      Number: {\n        loose(a: boolean, b: number) {\n          return a == !!b\n        },\n      },\n      String: {\n        loose(a: boolean, b: string) {\n          const bFalse = /false/i.test(b) || /0/.test(b)\n          const bTrue = /true/i.test(b) || /1/.test(b)\n          if (a) return a === bTrue\n          return a === !bFalse\n        },\n        diff(a: boolean, b: string) {\n          let res\n          const bFalse = /false/i.test(b) || /0/.test(b)\n          const bTrue = /true/i.test(b) || /1/.test(b)\n          if (a) res = a === bTrue\n          else res = a === !bFalse\n          if (res)\n            return {\n              result: eq.LOOSE,\n              from: a,\n              to: b,\n            }\n          return {\n            result: eq.NOT_EQUAL,\n            from: a,\n            to: b,\n          }\n        },\n      },\n      Undefined: {\n        loose(a: boolean, b: undefined) {\n          return !a == !b\n        },\n      },\n      Null: {\n        loose(a: boolean, b: null) {\n          return !a == !b\n        },\n      },\n    },\n    Number: {\n      Number: {\n        strict(a: number, b: number) {\n          return a === b\n        },\n        loose(a: number, b: number) {\n          return a == b\n        },\n        structure: eq.true,\n      },\n      String: {\n        loose(a: number, b: string) {\n          return a == +b\n        },\n      },\n      Date: {\n        strict(a: number, b: Date) {\n          return a === b.valueOf()\n        },\n        loose(a: number, b: Date) {\n          return a.valueOf() == b.valueOf()\n        },\n        structure: eq.true,\n      },\n      Null: {\n        loose(a: number, b: null) {\n          return !a == !b\n        },\n      },\n      Undefined: {\n        loose(a: number, b: undefined) {\n          return !a == !b\n        },\n      },\n      Object: {\n        loose(a: number, b: object) {\n          return a.toString() == b.toString()\n        },\n      },\n      Function: {\n        loose(a: number, b: Function) {\n          return a.toString() == b.toString()\n        },\n      },\n    },\n    String: {\n      Boolean: {\n        loose(a: string, b: boolean) {\n          const aFalse = /false/i.test(a) || /0/.test(a)\n          const aTrue = /true/i.test(a) || /1/.test(a)\n          if (b) return b === aTrue\n          return b === !aFalse\n        },\n        diff(a: string, b: boolean) {\n          let res\n          const aFalse = /false/i.test(a) || /0/.test(a)\n          const aTrue = /true/i.test(a) || /1/.test(a)\n          if (b) res = b === aTrue\n          else res = b === !aFalse\n          if (res)\n            return {\n              result: eq.LOOSE,\n              from: a,\n              to: b,\n            }\n          return {\n            result: eq.NOT_EQUAL,\n            from: a,\n            to: b,\n          }\n        },\n      },\n      String: {\n        strict(a: string, b: string) {\n          return a == b\n        },\n        loose(a: string, b: string) {\n          return a == b\n        },\n        structure: eq.true,\n        diff(a: string, b: string) {\n          if (a == b)\n            return {\n              result: 1,\n              value: b,\n            }\n\n          const result = WEB\n            ? [{ added: b, removed: a, value: a }]\n            : diffLines(a, b)\n          const srcLen = a.length\n          const dstLen = b.length\n          let unchangedCnt = 0\n          let removedCnt = 0\n          let removedLen = 0\n          let addedCnt = 0\n          let addedLen = 0\n\n          result.forEach(part => {\n            if (part.added) {\n              addedCnt += 1\n              addedLen += part.value.length\n            } else if (part.removed) {\n              removedCnt += 1\n              removedLen += part.value.length\n            } else {\n              unchangedCnt += 1\n              // unchangedLen += part.value.length\n            }\n          })\n          if (unchangedCnt === 1 && addedCnt === 0 && removedCnt === 0) {\n            return {\n              result: eq.LOOSE,\n              diff: 'lines',\n              changes: result,\n            }\n          }\n          if (unchangedCnt > 0 && (addedCnt > 0 || removedCnt > 0)) {\n            return {\n              result: eq.STRUCTURE,\n              diff: 'lines',\n              changes: result,\n              /* srcLen: ((addedLen > removedLen) ? dstLen : srcLen),\n\t\t\t\t\t\t\tremovedLen: removedLen,\n\t\t\t\t\t\t\taddedLen: addedLen, */\n              changeRating:\n                Math.abs(addedLen - removedLen) /\n                (addedLen > removedLen ? dstLen : srcLen),\n            }\n          }\n\n          return {\n            result: eq.NOT_EQUAL,\n            diff: 'lines',\n            from: a,\n            to: b,\n          }\n        },\n      },\n      RegExp: {\n        strict(a: string, b: RegExp) {\n          return a == b.source\n        },\n        loose(a: string, b: string) {\n          return a.toString() == b.toString()\n        },\n        structure: eq.false,\n      },\n      Date: {\n        strict(a: string, b: Date) {\n          if (a.toString() == b.toString()) return true\n\n          if (b.toJSON) {\n            let v0\n            let v1\n            v0 = a\n\n            if (b.toJSON) v1 = b.toJSON()\n            else v1 = b.toString()\n            return v0 == v1\n          }\n          return false\n        },\n        loose(a: string, b: Date) {\n          if (a.toString() == b.toString()) return true\n\n          if (b.toJSON) {\n            let v0\n            let v1\n            v0 = a\n            if (b.toJSON) v1 = b.toJSON()\n            else v1 = a.toString()\n            return v0 == v1\n          }\n          return false\n        },\n        structure: eq.true,\n        diff(a: string, b: Date) {\n          if (a.toString() == b.toString())\n            return {\n              result: eq.STRICT,\n              value: b.toString(),\n            }\n\n          if (b.toJSON) {\n            let v0\n            let v1\n            v0 = a\n            if (b.toJSON) v1 = b.toJSON()\n            else v1 = b.toString()\n\n            if (v0 == v1)\n              return {\n                result: eq.LOOSE,\n                from: a,\n                to: b,\n              }\n          }\n\n          return {\n            result: eq.NOT_EQUAL,\n            from: a,\n            to: b,\n          }\n        },\n      },\n      Null: {\n        loose(a: string, b: null) {\n          return !a == !b\n        },\n      },\n      Undefined: {\n        loose(a: string, b: undefined) {\n          return !a == !b\n        },\n      },\n      Array: {\n        strict(a: string, b: Array<any>) {\n          return a == b.join()\n        },\n        loose(a: string, b: Array<any>) {\n          return a == b.join()\n        },\n        structure: eq.true,\n      },\n      Object: {\n        strict(a: string, b: object) {\n          return a.toString() == b.toString()\n        },\n        loose(a: string, b: object) {\n          return a.toString() == b.toString()\n        },\n        structure: eq.false,\n      },\n      Function: {\n        strict(a: string, b: Function) {\n          return a.toString() == b.toString()\n        },\n        loose(a: string, b: Function) {\n          return a.toString() == b.toString()\n        },\n        structure: eq.true,\n      },\n    },\n    RegExp: {\n      // ввести сравнение регулярок с json версией mongoosejs\n      RegExp: {\n        strict(a: RegExp, b: RegExp) {\n          return a === b\n        },\n        loose(a: RegExp, b: RegExp) {\n          return a.toString() == b.toString()\n        },\n        structure: eq.true,\n        diff: eq.diffString,\n      },\n      Undefined: {\n        loose(a: RegExp, b: undefined) {\n          return a.test('undefined')\n        },\n      },\n      Null: {\n        loose(a: RegExp, b: null) {\n          return a.test('null')\n        },\n      },\n      Object: {\n        strict(a: RegExp, b: string) {\n          return a.toString() == b.toString()\n        },\n        loose(a: RegExp, b: string) {\n          return a.toString() == b.toString()\n        },\n      },\n    },\n    Date: {\n      Date: {\n        strict(a: Date, b: Date) {\n          if (a === b) return true\n          return a.toString() == b.toString()\n        },\n        loose(a: Date, b: Date) {\n          return a.toString() == b.toString()\n        },\n        structure: eq.true,\n      },\n      Object: {\n        strict(a: Date, b: object) {\n          return a.toString() == b.toString()\n        },\n        loose(a: Date, b: object) {\n          return a.toString() == b.toString()\n        },\n        structure: eq.false,\n        diff: eq.diffString,\n      },\n    },\n    Undefined: {\n      Undefined: {\n        strict: eq.true,\n        loose: eq.true,\n        structure: eq.true,\n        diff() {\n          return {\n            result: eq.STRICT,\n          }\n        },\n      },\n      Null: {\n        strict: eq.true,\n        loose: eq.true,\n        structure: eq.true,\n        diff() {\n          return {\n            result: eq.STRICT,\n            value: null,\n          }\n        },\n      },\n    },\n    Null: {\n      Null: {\n        strict: eq.true,\n        loose: eq.true,\n        structure: eq.true,\n        diff() {\n          return {\n            result: eq.STRICT,\n            value: null,\n          }\n        },\n      },\n    },\n    Array: {\n      Array: {\n        strict: eq.eqArray({\n          strict: true,\n        }),\n        loose: eq.eqArray({\n          loose: true,\n        }),\n        structure: eq.eqArray({\n          structure: true,\n        }),\n        diff: eq.eqArray({\n          diff: true,\n        }),\n      },\n      Object: {\n        strict: eq.eqObject({\n          strict: true,\n        }),\n        loose: eq.eqObject({\n          loose: true,\n        }),\n        structure: eq.eqObject({\n          structure: true,\n        }),\n        diff: eq.eqObject({\n          diff: true,\n        }),\n      },\n    },\n    Object: {\n      Object: {\n        // возможно нужны будут Другие операции\n        strict: eq.eqObject({\n          strict: true,\n        }),\n        loose: eq.eqObject({\n          loose: true,\n        }),\n        structure: eq.eqObject({\n          structure: true,\n        }),\n        diff: eq.eqObject({\n          diff: true,\n        }),\n      },\n    },\n    Function: {\n      Function: {\n        strict(a: Function, b: Function) {\n          return a === b\n        },\n        loose(a: Function, b: Function) {\n          return a.toString() == b.toString()\n        },\n        structure: eq.true,\n        diff: eq.diffString,\n      },\n    },\n  }\n}\n","//@ts-nocheck\nexport type EqConfig = {\n  strict?: boolean\n  loose?: boolean\n  structure?: boolean\n  diff?: boolean\n}\n\nexport type Result<T> = {\n  [key: string]: any\n  result?: T\n}\n\nexport type ComparatorFunction = (a: any, b: any) => DiffResult\n\nexport enum EqResult {\n  NOT_EQUAL = 0,\n  STRICT = 1,\n  LOOSE = 2,\n  STRUCTURE = 3,\n}\n\nexport interface DiffResult extends Record<string, any> {\n  result?: EqResult\n  value?: any\n  from?: any\n  to?: any\n  reorder?: boolean\n  removed?: Record<string, { order: number; value: any }>\n  inserted?: Record<string, { order: number; value: any }>\n  changeRating?: number\n}\n\nexport interface EqualityIput {\n  false: () => boolean\n  true: () => boolean\n  NOT_EQUAL: EqResult.NOT_EQUAL\n  STRICT: EqResult.STRICT\n  LOOSE: EqResult.LOOSE\n  STRUCTURE: EqResult.STRUCTURE\n  diffString: (a: string, b: string) => boolean | DiffResult\n  eqObject: (config: EqConfig) => boolean | DiffResult\n  eqArray: (config: EqConfig) => boolean | DiffResult\n}\n\nexport const Equality = {\n  false: () => false,\n  true: () => true,\n  NOT_EQUAL: 0,\n  STRICT: 1,\n  LOOSE: 2,\n  STRUCTURE: 3,\n\n  diffValue: (a: any, b: any): DiffResult => {\n    if (a === b)\n      return {\n        result: Equality.STRICT,\n        value: b,\n      }\n    if (a != null && b != null && a.valueOf() === b.valueOf())\n      return {\n        result: Equality.LOOSE,\n        from: a,\n        to: b,\n      }\n    return {\n      result: Equality.NOT_EQUAL,\n      from: a,\n      to: b,\n    }\n  },\n\n  diffString: (a: string, b: string) => {\n    if (a === b)\n      return {\n        result: Equality.STRICT,\n        value: b,\n      }\n    if (a.toString() == b.toString())\n      return {\n        result: Equality.LOOSE,\n        from: a,\n        to: b,\n      }\n    return {\n      result: Equality.NOT_EQUAL,\n      from: a,\n      to: b,\n    }\n  },\n\n  // diff содержит только поля которые изменились ??\n  // eslint-disable-next-line consistent-return\n  eqObject: (config: EqConfig) => {\n    if (config.strict) {\n      // строгое равенство структура + данные\n      return (source: any, dest: any, compare: ComparatorFunction) => {\n        if (source == dest) return true\n        const ks = Object.keys(source)\n        const kd = Object.keys(dest)\n        let key\n        const so = ks.toString() == kd.toString()\n        if (so) {\n          for (let i = 0, len = ks.length; i < len; i += 1) {\n            key = ks[i]\n            if (!compare(source[key], dest[key])) return false\n          }\n        } else {\n          return false\n        }\n        return true\n      }\n    }\n\n    if (config.loose) {\n      // второй объект может содержать дополнительные поля, но мы их не рассматриваем.\n      // структура и равенство*(compare) того что есть с тем что дали\n      return (source: any, dest: any, compare: ComparatorFunction) => {\n        if (source == dest) return true\n        const ks = Object.keys(source)\n        let key\n        for (let i = 0, len = ks.length; i < len; i += 1) {\n          key = ks[i]\n          if (!compare(source[key], dest[key])) {\n            return false\n          }\n        }\n        return true\n      }\n    }\n\n    if (config.structure) {\n      // проверяем что структура объекта такая же\n      // второй объект может содержать новые поля,\n      // и новые данные, но структура та же\n      return (source: any, dest: any, compare: ComparatorFunction) => {\n        if (source == dest) return true\n        const ks = Object.keys(source)\n        const kd = Object.keys(dest)\n        let i\n        let len\n        let key\n        if (ks.length > kd.length) return false\n        const so = ks.toString() == kd.toString()\n        if (so) {\n          for (i = 0, len = ks.length; i < len; i += 1) {\n            key = ks[i]\n            if (!compare(source[key], dest[key])) return false\n          }\n        } else {\n          const ksd = Object.keys(source).sort()\n          const passed: Record<string, any> = {}\n          for (i = 0, len = ksd.length; i < len; i += 1) {\n            key = ksd[i]\n            passed[key] = 1\n            if (!compare(source[key], dest[key])) return false\n          }\n          if (Object.keys(passed).sort().toString() != ksd.toString())\n            return false\n        }\n        return true\n      }\n    }\n\n    if (config.diff) {\n      // full processing\n      // здесь мы должны получить все варианты сразу\n      // strict\n      // loose\n      // structure\n      // diff\n      return (source: any, dest: any, compare: ComparatorFunction) => {\n        if (source == dest)\n          return {\n            result: 1,\n            value: dest,\n          }\n        const result: Result<any> = {}\n        let i\n        let len\n        let key\n        let ret\n        const ks = Object.keys(source)\n        const kd = Object.keys(dest)\n        const so = ks.toString() == kd.toString()\n        if (so) {\n          result.result = 1\n          for (i = 0, len = ks.length; i < len; i += 1) {\n            key = ks[i]\n            result[key] = compare(source[key], dest[key])\n            ret = result[key]\n            if (ret.result === 0) ret.result = 3\n            if (ret.result > 0 && result.result < ret.result)\n              result.result = ret.result\n          }\n        } else {\n          result.result = 1\n          const ksd = Object.keys(source).sort()\n          const kss = Object.keys(dest).sort()\n          result.reorder = ks.toString() != kd.toString()\n          const passed: Record<string, any> = {}\n          let srcI\n          let dstI\n          for (i = 0, len = ksd.length; i < len; i += 1) {\n            key = ksd[i]\n            passed[key] = true\n            srcI = ks.indexOf(key)\n            dstI = kd.indexOf(key)\n            if (dstI >= 0) {\n              result[key] = {}\n              if (srcI != dstI)\n                result[key].order = {\n                  from: ks.indexOf(key),\n                  to: kd.indexOf(key),\n                }\n              result[key].value = compare(source[key], dest[key])\n              ret = result[key].value\n              if (ret.result === 0) ret.result = 3\n              // structure of current object isn't changed\n              if (ret.result > 0 && result.result < ret.result)\n                result.result = ret.result\n            } else {\n              // removed items\n              result.result = 0\n              if (!result.removed) result.removed = {}\n              result.removed[key] = {\n                order: ks.indexOf(key),\n                value: source[key],\n              }\n            }\n          }\n          // new items\n          for (i = 0, len = kss.length; i < len; i += 1) {\n            key = kss[i]\n            if (passed[key] !== true) {\n              // if (result.result > 0) result.result = 2;\n              passed[key] = true\n              if (!result.inserted) result.inserted = {}\n              result.inserted[key] = {\n                order: kd.indexOf(key),\n                value: dest[key],\n              }\n            }\n          }\n        }\n        return result\n      }\n    }\n  },\n\n  eqArray: (config: EqConfig) => {\n    // strict -- полное равенство\n    // loose -- объекты перемешаны, пересортированы, но все на месте\n    // structure -- объекты на своих местах и каждый имеет свою структуру.\n    // diff\n    // diff reorder массивы простых значений только если\n    // нужно придумать условия\n    // 1. когда длинна одинаковая\n    // 2. когда меншье стала\n    // 3. когда больше стала\n    // или забить :)\n    // сделать для каждого типа свою функцию как в объекте\n    if (config.strict || config.structure) {\n      return (source: any, dest: any, compare: ComparatorFunction) => {\n        if (source == dest)\n          return {\n            result: 1,\n            value: dest,\n          }\n        if (source && dest && source.length == dest.length) {\n          for (let i = 0, len = source.length; i < len; i += 1) {\n            if (!compare(source[i], dest[i])) return false\n          }\n          return true\n        }\n        return false\n      }\n    }\n    if (config.loose) {\n      return (source: any, dest: any, compare: ComparatorFunction) => {\n        if (source == dest)\n          return {\n            result: 1,\n            value: dest,\n          }\n        let val\n        let i\n        let len\n        const foundItems: Array<any> = []\n        foundItems.length =\n          source.length > dest.length ? source.length : dest.length\n        if (source && dest && source.length <= dest.length) {\n          for (i = 0, len = source.length; i < len; i += 1) {\n            val = source[i]\n            let rec\n            let cmpRes\n            let found\n            for (let j = 0, dstlen = dest.length; j < dstlen; j += 1) {\n              rec = dest[j]\n              cmpRes = compare(val, rec)\n              if (cmpRes) {\n                found = rec\n                if (!foundItems[j]) break\n              } else {\n                found = undefined\n              }\n            }\n            if (!found) return false\n          }\n          return true\n        }\n        return false\n      }\n    }\n    if (config.diff) {\n      return (source: any, dest: any, compare: ComparatorFunction) => {\n        if (source == dest) {\n          return {\n            result: 1,\n            value: dest,\n          }\n        }\n\n        if (JSON.stringify(source) == JSON.stringify(dest)) {\n          return {\n            result: 1,\n            value: dest,\n          }\n        }\n        const result: DiffResult = {\n          result: 1,\n          reorder: true,\n        }\n\n        function compareRatings(a: DiffResult, b: DiffResult) {\n          return a?.cmpRes.changeRating - b.cmpRes.changeRating\n        }\n\n        let val\n        let i\n        let len\n        const foundItems = []\n        foundItems.length =\n          source.length > dest.length ? source.length : dest.length\n        let srcI\n        let dstI\n        for (i = 0, len = source.length; i < len; i += 1) {\n          val = source[i]\n          let rec\n          let cmpRes\n          let found\n          const approx: Array<{\n            found: any\n            dstI: number\n            cmpRes: DiffResult\n          }> = []\n          for (let j = 0, dstlen = dest.length; j < dstlen; j += 1) {\n            rec = dest[j]\n            cmpRes = compare(val, rec)\n            if (\n              cmpRes.result == EqResult.STRICT ||\n              cmpRes.result == EqResult.LOOSE\n            ) {\n              found = rec\n              dstI = dest.indexOf(rec)\n              if (!foundItems[j]) break\n            } else if (cmpRes.result === 3) {\n              approx.push({\n                found: rec,\n                dstI: dest.indexOf(rec),\n                cmpRes,\n              })\n            } else {\n              found = undefined\n              dstI = -1\n            }\n          }\n          srcI = source.indexOf(val)\n\n          if (!found && approx.length > 0) {\n            // debugger\n            approx.sort(compareRatings)\n            const aFound = approx.shift()\n            found = aFound.found\n            dstI = aFound.dstI\n            cmpRes = aFound.cmpRes\n            approx.length = 0\n          }\n\n          if (found) {\n            result[i] = {}\n            if (srcI != dstI) {\n              result[i].order = {\n                from: srcI,\n                to: dstI,\n              }\n            }\n            foundItems[dstI] = true\n            result[i].value = cmpRes\n            if (cmpRes?.result && cmpRes.result > 1 && result.result !== 0)\n              result.result = cmpRes?.result\n          } else {\n            result.result = 0\n            if (!result.removed) result.removed = {}\n            result.removed[i] = {\n              order: dstI,\n              value: val,\n            }\n          }\n        }\n        for (i = 0, len = dest.length; i < len; i += 1) {\n          val = dest[i]\n          if (foundItems[i] !== true) {\n            if (!result.inserted) result.inserted = {}\n            // if (result.result > 0) result.result = 2;\n            result.inserted[i] = {\n              order: i,\n              value: val,\n            }\n          }\n        }\n\n        if (!config.diff) {\n          // let res = true\n          // for (const v in result) {\n          //   res = res && result[v]\n          //   if (!res) break\n          // }\n          // return res\n          return Object.keys(result).every(v => result[v])\n        }\n        return result\n      }\n    }\n  },\n}\n\n/*\n\t0 - notEqual,\n\t1 - strict\n\t2 - loose\n\t3 - structure\n*/\n\n// eslint-disable-next-line no-unused-vars\n\nimport { cmp } from './mapping'\n\nconst Compariable = cmp(Equality)\n\n// eslint-disable-next-line consistent-return\nexport function getComparator(\n  a: any,\n  b: any,\n  type: 'strict' | 'loose' | 'structure' | 'diff',\n) {\n  let cmpr = Compariable[a][b]\n  let res = cmpr ? cmpr[type] : null\n  if (!res) {\n    cmpr = Compariable[b][a]\n    res = cmpr ? cmpr[type] : null\n  }\n  if (!res) {\n    // eslint-disable-next-line default-case\n    switch (type) {\n      case 'strict':\n        return Equality.false\n      case 'loose':\n        return Equality.false\n      case 'structure':\n        return Equality.false\n      case 'diff':\n        return Equality.diffValue\n    }\n  } else return res\n}\n\nexport function getType(v: any) {\n  //@ts-ignore\n  return Object.prototype.toString.call(v).match(/\\[object (.+)\\]/)[1]\n}\n\nexport function strictEq(a: any, b: any) {\n  const t0 = getType(a)\n  const t1 = getType(b)\n  const fnc = getComparator(t0, t1, 'strict')\n  return fnc(a, b, strictEq)\n}\n\nexport function looseEq(a: any, b: any) {\n  const t0 = getType(a)\n  const t1 = getType(b)\n  const fnc = getComparator(t0, t1, 'loose')\n  return fnc(a, b, looseEq)\n}\n\nexport function structureEq(a: any, b: any) {\n  const t0 = getType(a)\n  const t1 = getType(b)\n  const fnc = getComparator(t0, t1, 'structure')\n  return fnc(a, b, structureEq)\n}\n\nexport function diff(a: any, b: any) {\n  const t0 = getType(a)\n  const t1 = getType(b)\n  const fnc = getComparator(t0, t1, 'diff')\n  return fnc(a, b, diff)\n}\n","export function set(data: Record<string, any>, path: string, value: any) {\n  if (typeof data === 'object') {\n    const parts = path.split('.')\n    if (Array.isArray(parts)) {\n      const curr = parts.shift()\n      if (parts.length > 0) {\n        if (!data[curr as string]) {\n          if (Number.isNaN(Number(parts[0]))) data[curr as string] = {}\n          else data[curr as string] = []\n        }\n        set(data[curr as string], parts.join('.'), value)\n      } else data[path as string] = value\n    } else {\n      data[path as string] = value\n    }\n  }\n}\n","import { set } from './set'\n\nexport function fold<T extends Record<string, any>>(data: T):Record<string, any> {\n  const result = {}\n  const keys = Object.keys(data)\n  for (let i = 0, len = keys.length; i < len; i += 1) {\n    set(result, keys[i], data[keys[i]])\n  }\n  return result\n}\n","export function unfold(\n  data: Record<string, any>,\n  _result?: Record<string, any>,\n  _propName?: string,\n) {\n  const result = _result || {}\n  const propName = _propName || ''\n  let i\n  let len\n\n  if (Array.isArray(data)) {\n    for (i = 0, len = data.length; i < len; i += 1) {\n      unfold(data[i], result, (propName ? `${propName}.` : '') + i)\n    }\n  } else if (data && data.constructor === Object) {\n    const keys = Object.keys(data)\n    for (i = 0, len = keys.length; i < len; i += 1) {\n      unfold(data[keys[i]], result, (propName ? `${propName}.` : '') + keys[i])\n    }\n  } else {\n    result[propName] = data\n  }\n  return result\n}\n","export function get<T extends Record<string, any>, R>(data: T, path: string): R\nexport function get<T extends Record<string, any>, R>(\n  data: Array<T>,\n  path: string,\n): Array<R>\nexport function get<T extends Record<string, any>>(data: T, path: string) {\n  if (Array.isArray(data)) {\n    const result = []\n    for (let i = 0, len = data.length; i < len; i += 1) {\n      result.push(get(data[i], path))\n    }\n    return result\n  }\n  if (typeof data === 'object') {\n    if (data[path] === undefined) {\n      const parts = path.split('.')\n      if (Array.isArray(parts)) {\n        const curr = parts.shift()\n        if (parts.length > 0) {\n          return get(data[curr as string], parts.join('.'))\n        }\n        return data[curr as string]\n      }\n    }\n    return data[path]\n  }\n  return data\n}\n","export function unset(data: Record<string, any>, path: string) {\n  if (Array.isArray(data)) {\n    for (let i = 0, len = data.length; i < len; i += 1) {\n      unset(data[i], path)\n    }\n  } else if (typeof data === 'object') {\n    if (data[path] === undefined) {\n      const parts = path.split('.')\n      if (Array.isArray(parts)) {\n        const curr = parts.shift()\n        if (parts.length > 0) {\n          unset(data[curr as string], parts.join('.'))\n        } else {\n          delete data[curr as string]\n        }\n      }\n    } else {\n      delete data[path]\n    }\n  }\n}\n","export function has<T extends Record<string, any>>(\n  data: T,\n  path: string,\n): boolean\nexport function has<T extends Record<string, any>>(\n  data: Array<T>,\n  path: string,\n): Array<boolean>\nexport function has<T extends Record<string, any>>(\n  data: T | Array<T>,\n  path: string,\n) {\n  if (Array.isArray(data)) {\n    const result: Array<any> = []\n    for (let i = 0, len = data.length; i < len; i += 1) {\n      result.push(has(data[i], path))\n    }\n    return result\n  } else if (typeof data === 'object') {\n    if (data[path] === undefined) {\n      const parts = path.split('.')\n      if (Array.isArray(parts)) {\n        const curr = parts.shift()\n        if (parts.length > 0) {\n          return has(data[curr as string], parts.join('.'))\n        }\n        return (curr as string) in data\n      }\n    } else {\n      return path in data\n    }\n  } else return true\n}\n"],"names":["diffLines"],"mappings":"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"}