{"version":3,"file":"index.js","mappings":"wCAeA,IAAYA,E,kJAAZ,SAAYA,GACV,6BACA,uBACA,qBACA,4BACD,CALD,CAAYA,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KA8BP,EAAAC,SAAW,CACtBC,MAAO,KAAM,EACbC,KAAM,KAAM,EACZC,UAAW,EACXC,OAAQ,EACRC,MAAO,EACPC,UAAW,EAEXC,UAAW,CAACC,EAAQC,IACdD,IAAMC,EACD,CACLC,OAAQ,EAAAV,SAASI,OACjBO,MAAOF,GAEF,MAALD,GAAkB,MAALC,GAAaD,EAAEI,YAAcH,EAAEG,UACvC,CACLF,OAAQ,EAAAV,SAASK,MACjBQ,KAAML,EACNM,GAAIL,GAED,CACLC,OAAQ,EAAAV,SAASG,UACjBU,KAAML,EACNM,GAAIL,GAIRM,WAAY,CAACP,EAAWC,IAClBD,IAAMC,EACD,CACLC,OAAQ,EAAAV,SAASI,OACjBO,MAAOF,GAEPD,EAAEQ,YAAcP,EAAEO,WACb,CACLN,OAAQ,EAAAV,SAASK,MACjBQ,KAAML,EACNM,GAAIL,GAED,CACLC,OAAQ,EAAAV,SAASG,UACjBU,KAAML,EACNM,GAAIL,GAMRQ,SAAWC,GACLA,EAAOC,OAEF,CAACC,EAAaC,EAAWC,KAC9B,GAAIF,GAAUC,EAAM,OAAO,EAC3B,MAAME,EAAKC,OAAOC,KAAKL,GACjBM,EAAKF,OAAOC,KAAKJ,GACvB,IAAIM,EAEJ,GADWJ,EAAGP,YAAcU,EAAGV,WAO7B,OAAO,EALP,IAAK,IAAIY,EAAI,EAAGC,EAAMN,EAAGO,OAAQF,EAAIC,EAAKD,GAAK,EAE7C,GADAD,EAAMJ,EAAGK,IACJN,EAAQF,EAAOO,GAAMN,EAAKM,IAAO,OAAO,EAKjD,OAAO,CAAI,EAIXT,EAAOa,MAGF,CAACX,EAAaC,EAAWC,KAC9B,GAAIF,GAAUC,EAAM,OAAO,EAC3B,MAAME,EAAKC,OAAOC,KAAKL,GACvB,IAAIO,EACJ,IAAK,IAAIC,EAAI,EAAGC,EAAMN,EAAGO,OAAQF,EAAIC,EAAKD,GAAK,EAE7C,GADAD,EAAMJ,EAAGK,IACJN,EAAQF,EAAOO,GAAMN,EAAKM,IAC7B,OAAO,EAGX,OAAO,CAAI,EAIXT,EAAOc,UAIF,CAACZ,EAAaC,EAAWC,KAC9B,GAAIF,GAAUC,EAAM,OAAO,EAC3B,MAAME,EAAKC,OAAOC,KAAKL,GACjBM,EAAKF,OAAOC,KAAKJ,GACvB,IAAIO,EACAC,EACAF,EACJ,GAAIJ,EAAGO,OAASJ,EAAGI,OAAQ,OAAO,EAElC,GADWP,EAAGP,YAAcU,EAAGV,YAE7B,IAAKY,EAAI,EAAGC,EAAMN,EAAGO,OAAQF,EAAIC,EAAKD,GAAK,EAEzC,GADAD,EAAMJ,EAAGK,IACJN,EAAQF,EAAOO,GAAMN,EAAKM,IAAO,OAAO,MAE1C,CACL,MAAMM,EAAMT,OAAOC,KAAKL,GAAQc,OAC1BC,EAA8B,CAAC,EACrC,IAAKP,EAAI,EAAGC,EAAMI,EAAIH,OAAQF,EAAIC,EAAKD,GAAK,EAG1C,GAFAD,EAAMM,EAAIL,GACVO,EAAOR,GAAO,GACTL,EAAQF,EAAOO,GAAMN,EAAKM,IAAO,OAAO,EAE/C,GAAIH,OAAOC,KAAKU,GAAQD,OAAOlB,YAAciB,EAAIjB,WAC/C,OAAO,C,CAEX,OAAO,CAAI,EAIXE,EAAOkB,KAOF,CAAChB,EAAaC,EAAWC,KAC9B,GAAIF,GAAUC,EACZ,MAAO,CACLX,OAAQ,EACRC,MAAOU,GAEX,MAAMX,EAAsB,CAAC,EAC7B,IAAIkB,EACAC,EACAF,EACAU,EACJ,MAAMd,EAAKC,OAAOC,KAAKL,GACjBM,EAAKF,OAAOC,KAAKJ,GAEvB,GADWE,EAAGP,YAAcU,EAAGV,WAG7B,IADAN,EAAOA,OAAS,EACXkB,EAAI,EAAGC,EAAMN,EAAGO,OAAQF,EAAIC,EAAKD,GAAK,EACzCD,EAAMJ,EAAGK,GACTlB,EAAOiB,GAAOL,EAAQF,EAAOO,GAAMN,EAAKM,IACxCU,EAAM3B,EAAOiB,GACM,IAAfU,EAAI3B,SAAc2B,EAAI3B,OAAS,GAC/B2B,EAAI3B,OAAS,GAAKA,EAAOA,OAAS2B,EAAI3B,SACxCA,EAAOA,OAAS2B,EAAI3B,YAEnB,CACLA,EAAOA,OAAS,EAChB,MAAMuB,EAAMT,OAAOC,KAAKL,GAAQc,OAC1BI,EAAMd,OAAOC,KAAKJ,GAAMa,OAC9BxB,EAAO6B,QAAUhB,EAAGP,YAAcU,EAAGV,WACrC,MAAMmB,EAA8B,CAAC,EACrC,IAAIK,EACAC,EACJ,IAAKb,EAAI,EAAGC,EAAMI,EAAIH,OAAQF,EAAIC,EAAKD,GAAK,EAC1CD,EAAMM,EAAIL,GACVO,EAAOR,IAAO,EACda,EAAOjB,EAAGmB,QAAQf,GAClBc,EAAOf,EAAGgB,QAAQf,GACdc,GAAQ,GACV/B,EAAOiB,GAAO,CAAC,EACXa,GAAQC,IACV/B,EAAOiB,GAAKgB,MAAQ,CAClB9B,KAAMU,EAAGmB,QAAQf,GACjBb,GAAIY,EAAGgB,QAAQf,KAEnBjB,EAAOiB,GAAKhB,MAAQW,EAAQF,EAAOO,GAAMN,EAAKM,IAC9CU,EAAM3B,EAAOiB,GAAKhB,MACC,IAAf0B,EAAI3B,SAAc2B,EAAI3B,OAAS,GAE/B2B,EAAI3B,OAAS,GAAKA,EAAOA,OAAS2B,EAAI3B,SACxCA,EAAOA,OAAS2B,EAAI3B,UAGtBA,EAAOA,OAAS,EACXA,EAAOkC,UAASlC,EAAOkC,QAAU,CAAC,GACvClC,EAAOkC,QAAQjB,GAAO,CACpBgB,MAAOpB,EAAGmB,QAAQf,GAClBhB,MAAOS,EAAOO,KAKpB,IAAKC,EAAI,EAAGC,EAAMS,EAAIR,OAAQF,EAAIC,EAAKD,GAAK,EAC1CD,EAAMW,EAAIV,IACU,IAAhBO,EAAOR,KAETQ,EAAOR,IAAO,EACTjB,EAAOmC,WAAUnC,EAAOmC,SAAW,CAAC,GACzCnC,EAAOmC,SAASlB,GAAO,CACrBgB,MAAOjB,EAAGgB,QAAQf,GAClBhB,MAAOU,EAAKM,I,CAKpB,OAAOjB,CAAM,OAjFjB,EAsFFoC,QAAU5B,GAYJA,EAAOC,QAAUD,EAAOc,UACnB,CAACZ,EAAaC,EAAWC,KAC9B,GAAIF,GAAUC,EACZ,MAAO,CACLX,OAAQ,EACRC,MAAOU,GAEX,GAAID,GAAUC,GAAQD,EAAOU,QAAUT,EAAKS,OAAQ,CAClD,IAAK,IAAIF,EAAI,EAAGC,EAAMT,EAAOU,OAAQF,EAAIC,EAAKD,GAAK,EACjD,IAAKN,EAAQF,EAAOQ,GAAIP,EAAKO,IAAK,OAAO,EAE3C,OAAO,C,CAET,OAAO,CAAK,EAGZV,EAAOa,MACF,CAACX,EAAaC,EAAWC,KAC9B,GAAIF,GAAUC,EACZ,MAAO,CACLX,OAAQ,EACRC,MAAOU,GAEX,IAAI0B,EACAnB,EACAC,EACJ,MAAMmB,EAAyB,GAG/B,GAFAA,EAAWlB,OACTV,EAAOU,OAAST,EAAKS,OAASV,EAAOU,OAAST,EAAKS,OACjDV,GAAUC,GAAQD,EAAOU,QAAUT,EAAKS,OAAQ,CAClD,IAAKF,EAAI,EAAGC,EAAMT,EAAOU,OAAQF,EAAIC,EAAKD,GAAK,EAAG,CAEhD,IAAIqB,EACAC,EACAC,EAHJJ,EAAM3B,EAAOQ,GAIb,IAAK,IAAIwB,EAAI,EAAGC,EAAShC,EAAKS,OAAQsB,EAAIC,EAAQD,GAAK,EAGrD,GAFAH,EAAM5B,EAAK+B,GACXF,EAAS5B,EAAQyB,EAAKE,GAClBC,GAEF,GADAC,EAAQF,GACHD,EAAWI,GAAI,WAEpBD,OAAQG,EAGZ,IAAKH,EAAO,OAAO,C,CAErB,OAAO,C,CAET,OAAO,CAAK,EAGZjC,EAAOkB,KACF,CAAChB,EAAaC,EAAWC,KAC9B,GAAIF,GAAUC,EACZ,MAAO,CACLX,OAAQ,EACRC,MAAOU,GAIX,GAAIkC,KAAKC,UAAUpC,IAAWmC,KAAKC,UAAUnC,GAC3C,MAAO,CACLX,OAAQ,EACRC,MAAOU,GAGX,MAAMX,EAAqB,CACzBA,OAAQ,EACR6B,SAAS,GAGX,SAASkB,EAAejD,EAAeC,GACrC,OAAOD,aAAC,EAADA,EAAG0C,OAAOQ,cAAejD,EAAEyC,OAAOQ,YAC3C,CAEA,IAAIX,EACAnB,EACAC,EACJ,MAAMmB,EAAa,GAGnB,IAAIR,EACAC,EACJ,IAJAO,EAAWlB,OACTV,EAAOU,OAAST,EAAKS,OAASV,EAAOU,OAAST,EAAKS,OAGhDF,EAAI,EAAGC,EAAMT,EAAOU,OAAQF,EAAIC,EAAKD,GAAK,EAAG,CAEhD,IAAIqB,EACAC,EACAC,EAHJJ,EAAM3B,EAAOQ,GAIb,MAAM+B,EAID,GACL,IAAK,IAAIP,EAAI,EAAGC,EAAShC,EAAKS,OAAQsB,EAAIC,EAAQD,GAAK,EAGrD,GAFAH,EAAM5B,EAAK+B,GACXF,EAAS5B,EAAQyB,EAAKE,GAEpBC,EAAOxC,QAAUX,EAASK,QAC1B8C,EAAOxC,QAAUX,EAASM,OAI1B,GAFA8C,EAAQF,EACRR,EAAOpB,EAAKqB,QAAQO,IACfD,EAAWI,GAAI,WACO,IAAlBF,EAAOxC,OAChBiD,EAAOC,KAAK,CACVT,MAAOF,EACPR,KAAMpB,EAAKqB,QAAQO,GACnBC,YAGFC,OAAQG,EACRb,GAAQ,GAKZ,GAFAD,EAAOpB,EAAOsB,QAAQK,IAEjBI,GAASQ,EAAO7B,OAAS,EAAG,CAE/B6B,EAAOzB,KAAKuB,GACZ,MAAMI,EAASF,EAAOG,QACtBX,EAAQU,EAAOV,MACfV,EAAOoB,EAAOpB,KACdS,EAASW,EAAOX,OAChBS,EAAO7B,OAAS,C,CAGdqB,GACFzC,EAAOkB,GAAK,CAAC,EACTY,GAAQC,IACV/B,EAAOkB,GAAGe,MAAQ,CAChB9B,KAAM2B,EACN1B,GAAI2B,IAGRO,EAAWP,IAAQ,EACnB/B,EAAOkB,GAAGjB,MAAQuC,GACdA,aAAM,EAANA,EAAQxC,SAAUwC,EAAOxC,OAAS,GAAuB,IAAlBA,EAAOA,SAChDA,EAAOA,OAASwC,aAAM,EAANA,EAAQxC,UAE1BA,EAAOA,OAAS,EACXA,EAAOkC,UAASlC,EAAOkC,QAAU,CAAC,GACvClC,EAAOkC,QAAQhB,GAAK,CAClBe,MAAOF,EACP9B,MAAOoC,G,CAIb,IAAKnB,EAAI,EAAGC,EAAMR,EAAKS,OAAQF,EAAIC,EAAKD,GAAK,EAC3CmB,EAAM1B,EAAKO,IACW,IAAlBoB,EAAWpB,KACRlB,EAAOmC,WAAUnC,EAAOmC,SAAW,CAAC,GAEzCnC,EAAOmC,SAASjB,GAAK,CACnBe,MAAOf,EACPjB,MAAOoC,IAKb,OAAK7B,EAAOkB,KASL1B,EAFEc,OAAOC,KAAKf,GAAQqD,OAAMC,GAAKtD,EAAOsD,IAElC,OArHjB,GAoIJ,MAEMC,GAAc,EAFpB,OAEoBC,KAAI,EAAAlE,UAGxB,SAAgBmE,EACd3D,EACAC,EACA2D,GAEA,IAAIC,EAAOJ,EAAYzD,GAAGC,GACtB6D,EAAMD,EAAOA,EAAKD,GAAQ,KAK9B,GAJKE,IACHD,EAAOJ,EAAYxD,GAAGD,GACtB8D,EAAMD,EAAOA,EAAKD,GAAQ,MAEvBE,EAYE,OAAOA,EAVZ,OAAQF,GACN,IAAK,SAEL,IAAK,QAEL,IAAK,YACH,OAAO,EAAApE,SAASC,MAClB,IAAK,OACH,OAAO,EAAAD,SAASO,UAGxB,CAEA,SAAgBgE,EAAQP,GAEtB,OAAOxC,OAAOgD,UAAUxD,SAASyD,KAAKT,GAAGU,MAAM,mBAAmB,EACpE,CA7BA,kBA0BA,YAKA,oBAAgBC,EAASnE,EAAQC,GAI/B,OADY0D,EAFDI,EAAQ/D,GACR+D,EAAQ9D,GACe,SAC3BmE,CAAIpE,EAAGC,EAAGkE,EACnB,EAEA,mBAAgBE,EAAQrE,EAAQC,GAI9B,OADY0D,EAFDI,EAAQ/D,GACR+D,EAAQ9D,GACe,QAC3BmE,CAAIpE,EAAGC,EAAGoE,EACnB,EAEA,uBAAgBC,EAAYtE,EAAQC,GAIlC,OADY0D,EAFDI,EAAQ/D,GACR+D,EAAQ9D,GACe,YAC3BmE,CAAIpE,EAAGC,EAAGqE,EACnB,EAEA,gBAAgB1C,EAAK5B,EAAQC,GAI3B,OADY0D,EAFDI,EAAQ/D,GACR+D,EAAQ9D,GACe,OAC3BmE,CAAIpE,EAAGC,EAAG2B,EACnB,C,+EC5fA,eAEA,gBAAoD2C,GAClD,MAAMrE,EAAS,CAAC,EACVe,EAAOD,OAAOC,KAAKsD,GACzB,IAAK,IAAInD,EAAI,EAAGC,EAAMJ,EAAKK,OAAQF,EAAIC,EAAKD,GAAK,GAC/C,IAAAoD,KAAItE,EAAQe,EAAKG,GAAImD,EAAKtD,EAAKG,KAEjC,OAAOlB,CACT,C,4ECJA,eAAgBuE,EAAmCF,EAASG,GAC1D,GAAIC,MAAMC,QAAQL,GAAO,CACvB,MAAMrE,EAAS,GACf,IAAK,IAAIkB,EAAI,EAAGC,EAAMkD,EAAKjD,OAAQF,EAAIC,EAAKD,GAAK,EAC/ClB,EAAOkD,KAAKqB,EAAIF,EAAKnD,GAAIsD,IAE3B,OAAOxE,C,CAET,GAAoB,iBAATqE,EAAmB,CAC5B,QAAmBzB,IAAfyB,EAAKG,GAAqB,CAC5B,MAAMG,EAAQH,EAAKI,MAAM,KACzB,GAAIH,MAAMC,QAAQC,GAAQ,CACxB,MAAME,EAAOF,EAAMvB,QACnB,OAAIuB,EAAMvD,OAAS,EACVmD,EAAIF,EAAKQ,GAAiBF,EAAMG,KAAK,MAEvCT,EAAKQ,E,EAGhB,OAAOR,EAAKG,E,CAEd,OAAOH,CACT,C,4ECnBA,eAAgBU,EACdV,EACAG,GAEA,GAAIC,MAAMC,QAAQL,GAAO,CACvB,MAAMrE,EAAS,GACf,IAAK,IAAIkB,EAAI,EAAGC,EAAMkD,EAAKjD,OAAQF,EAAIC,EAAKD,GAAK,EAC/ClB,EAAOkD,KAAK6B,EAAIV,EAAKnD,GAAIsD,IAE3B,OAAOxE,C,CACF,GAAoB,iBAATqE,EAaX,OAAO,EAZZ,QAAmBzB,IAAfyB,EAAKG,GAUP,OAAOA,KAAQH,EAVa,CAC5B,MAAMM,EAAQH,EAAKI,MAAM,KACzB,GAAIH,MAAMC,QAAQC,GAAQ,CACxB,MAAME,EAAOF,EAAMvB,QACnB,OAAIuB,EAAMvD,OAAS,EACV2D,EAAIV,EAAKQ,GAAiBF,EAAMG,KAAK,MAEtCD,KAAmBR,C,EAMnC,C,8ECrBA,eAGA,eAAoBW,GAClB,MAAO,CACLC,QAAS,CACPA,QAAS,CACPxE,OAAM,CAACX,EAAYC,IACVD,IAAMC,EAEfsB,MAAK,CAACvB,EAAYC,IACTD,GAAKC,EAEduB,UAAW0D,EAAGxF,MAEhB0F,OAAQ,CACN7D,MAAK,CAACvB,EAAYC,IACTD,KAAOC,GAGlBoF,OAAQ,CACN9D,MAAMvB,EAAYC,GAChB,MAAMqF,EAAS,SAASC,KAAKtF,IAAM,IAAIsF,KAAKtF,GACtCuF,EAAQ,QAAQD,KAAKtF,IAAM,IAAIsF,KAAKtF,GAC1C,OAAID,EAAUA,IAAMwF,EACbxF,KAAOsF,CAChB,EACA1D,KAAK5B,EAAYC,GACf,IAAI6D,EACJ,MAAMwB,EAAS,SAASC,KAAKtF,IAAM,IAAIsF,KAAKtF,GACtCuF,EAAQ,QAAQD,KAAKtF,IAAM,IAAIsF,KAAKtF,GAG1C,OAFO6D,EAAH9D,EAASA,IAAMwF,EACRxF,KAAOsF,EACdxB,EACK,CACL5D,OAAQgF,EAAGrF,MACXQ,KAAML,EACNM,GAAIL,GAED,CACLC,OAAQgF,EAAGvF,UACXU,KAAML,EACNM,GAAIL,EAER,GAEFwF,UAAW,CACTlE,MAAK,CAACvB,EAAYC,KACRD,IAAMC,GAGlByF,KAAM,CACJnE,MAAK,CAACvB,EAAYC,KACRD,IAAMC,IAIpBmF,OAAQ,CACNA,OAAQ,CACNzE,OAAM,CAACX,EAAWC,IACTD,IAAMC,EAEfsB,MAAK,CAACvB,EAAWC,IACRD,GAAKC,EAEduB,UAAW0D,EAAGxF,MAEhB2F,OAAQ,CACN9D,MAAK,CAACvB,EAAWC,IACRD,IAAMC,GAGjB0F,KAAM,CACJhF,OAAM,CAACX,EAAWC,IACTD,IAAMC,EAAEG,UAEjBmB,MAAK,CAACvB,EAAWC,IACRD,EAAEI,WAAaH,EAAEG,UAE1BoB,UAAW0D,EAAGxF,MAEhBgG,KAAM,CACJnE,MAAK,CAACvB,EAAWC,KACPD,IAAMC,GAGlBwF,UAAW,CACTlE,MAAK,CAACvB,EAAWC,KACPD,IAAMC,GAGlBe,OAAQ,CACNO,MAAK,CAACvB,EAAWC,IACRD,EAAEQ,YAAcP,EAAEO,YAG7BoF,SAAU,CACRrE,MAAK,CAACvB,EAAWC,IACRD,EAAEQ,YAAcP,EAAEO,aAI/B6E,OAAQ,CACNF,QAAS,CACP5D,MAAMvB,EAAWC,GACf,MAAM4F,EAAS,SAASN,KAAKvF,IAAM,IAAIuF,KAAKvF,GACtC8F,EAAQ,QAAQP,KAAKvF,IAAM,IAAIuF,KAAKvF,GAC1C,OAAIC,EAAUA,IAAM6F,EACb7F,KAAO4F,CAChB,EACAjE,KAAK5B,EAAWC,GACd,IAAI6D,EACJ,MAAM+B,EAAS,SAASN,KAAKvF,IAAM,IAAIuF,KAAKvF,GACtC8F,EAAQ,QAAQP,KAAKvF,IAAM,IAAIuF,KAAKvF,GAG1C,OAFO8D,EAAH7D,EAASA,IAAM6F,EACR7F,KAAO4F,EACd/B,EACK,CACL5D,OAAQgF,EAAGrF,MACXQ,KAAML,EACNM,GAAIL,GAED,CACLC,OAAQgF,EAAGvF,UACXU,KAAML,EACNM,GAAIL,EAER,GAEFoF,OAAQ,CACN1E,OAAM,CAACX,EAAWC,IACTD,GAAKC,EAEdsB,MAAK,CAACvB,EAAWC,IACRD,GAAKC,EAEduB,UAAW0D,EAAGxF,KACdkC,KAAK5B,EAAWC,GACd,GAAID,GAAKC,EACP,MAAO,CACLC,OAAQ,EACRC,MAAOF,GAGX,MAAMC,GAEF,IAAA6F,WAAU/F,EAAGC,GACX+F,EAAShG,EAAEsB,OACX2E,EAAShG,EAAEqB,OACjB,IAAI4E,EAAe,EACfC,EAAa,EACbC,EAAa,EACbC,EAAW,EACXC,EAAW,EAcf,OAZApG,EAAOqG,SAAQC,IACTA,EAAKC,OACPJ,GAAY,EACZC,GAAYE,EAAKrG,MAAMmB,QACdkF,EAAKpE,SACd+D,GAAc,EACdC,GAAcI,EAAKrG,MAAMmB,QAEzB4E,GAAgB,C,IAIC,IAAjBA,GAAmC,IAAbG,GAAiC,IAAfF,EACnC,CACLjG,OAAQgF,EAAGrF,MACX+B,KAAM,QACN8E,QAASxG,GAGTgG,EAAe,IAAMG,EAAW,GAAKF,EAAa,GAC7C,CACLjG,OAAQgF,EAAGpF,UACX8B,KAAM,QACN8E,QAASxG,EAITgD,aACEyD,KAAKC,IAAIN,EAAWF,IACnBE,EAAWF,EAAaH,EAASD,IAIjC,CACL9F,OAAQgF,EAAGvF,UACXiC,KAAM,QACNvB,KAAML,EACNM,GAAIL,EAER,GAEF4G,OAAQ,CACNlG,OAAM,CAACX,EAAWC,IACTD,GAAKC,EAAEW,OAEhBW,MAAK,CAACvB,EAAWC,IACRD,EAAEQ,YAAcP,EAAEO,WAE3BgB,UAAW0D,EAAGzF,OAEhBkG,KAAM,CACJhF,OAAOX,EAAWC,GAChB,GAAID,EAAEQ,YAAcP,EAAEO,WAAY,OAAO,EAEzC,GAAIP,EAAE6G,OAAQ,CACZ,IAAIC,EACAC,EAKJ,OAJAD,EAAK/G,EAESgH,EAAV/G,EAAE6G,OAAa7G,EAAE6G,SACX7G,EAAEO,WACLuG,GAAMC,C,CAEf,OAAO,CACT,EACAzF,MAAMvB,EAAWC,GACf,GAAID,EAAEQ,YAAcP,EAAEO,WAAY,OAAO,EAEzC,GAAIP,EAAE6G,OAAQ,CACZ,IAAIC,EACAC,EAIJ,OAHAD,EAAK/G,EACSgH,EAAV/G,EAAE6G,OAAa7G,EAAE6G,SACX9G,EAAEQ,WACLuG,GAAMC,C,CAEf,OAAO,CACT,EACAxF,UAAW0D,EAAGxF,KACdkC,KAAK5B,EAAWC,GACd,GAAID,EAAEQ,YAAcP,EAAEO,WACpB,MAAO,CACLN,OAAQgF,EAAGtF,OACXO,MAAOF,EAAEO,YAGb,GAAIP,EAAE6G,OAAQ,CACZ,IAAIC,EACAC,EAKJ,GAJAD,EAAK/G,EACSgH,EAAV/G,EAAE6G,OAAa7G,EAAE6G,SACX7G,EAAEO,WAERuG,GAAMC,EACR,MAAO,CACL9G,OAAQgF,EAAGrF,MACXQ,KAAML,EACNM,GAAIL,E,CAIV,MAAO,CACLC,OAAQgF,EAAGvF,UACXU,KAAML,EACNM,GAAIL,EAER,GAEFyF,KAAM,CACJnE,MAAK,CAACvB,EAAWC,KACPD,IAAMC,GAGlBwF,UAAW,CACTlE,MAAK,CAACvB,EAAWC,KACPD,IAAMC,GAGlB0E,MAAO,CACLhE,OAAM,CAACX,EAAWC,IACTD,GAAKC,EAAE+E,OAEhBzD,MAAK,CAACvB,EAAWC,IACRD,GAAKC,EAAE+E,OAEhBxD,UAAW0D,EAAGxF,MAEhBsB,OAAQ,CACNL,OAAM,CAACX,EAAWC,IACTD,EAAEQ,YAAcP,EAAEO,WAE3Be,MAAK,CAACvB,EAAWC,IACRD,EAAEQ,YAAcP,EAAEO,WAE3BgB,UAAW0D,EAAGzF,OAEhBmG,SAAU,CACRjF,OAAM,CAACX,EAAWC,IACTD,EAAEQ,YAAcP,EAAEO,WAE3Be,MAAK,CAACvB,EAAWC,IACRD,EAAEQ,YAAcP,EAAEO,WAE3BgB,UAAW0D,EAAGxF,OAGlBmH,OAAQ,CAENA,OAAQ,CACNlG,OAAM,CAACX,EAAWC,IACTD,IAAMC,EAEfsB,MAAK,CAACvB,EAAWC,IACRD,EAAEQ,YAAcP,EAAEO,WAE3BgB,UAAW0D,EAAGxF,KACdkC,KAAMsD,EAAG3E,YAEXkF,UAAW,CACTlE,MAAK,CAACvB,EAAWC,IACRD,EAAEuF,KAAK,cAGlBG,KAAM,CACJnE,MAAK,CAACvB,EAAWC,IACRD,EAAEuF,KAAK,SAGlBvE,OAAQ,CACNL,OAAM,CAACX,EAAWC,IACTD,EAAEQ,YAAcP,EAAEO,WAE3Be,MAAK,CAACvB,EAAWC,IACRD,EAAEQ,YAAcP,EAAEO,aAI/BmF,KAAM,CACJA,KAAM,CACJhF,OAAM,CAACX,EAASC,IACVD,IAAMC,GACHD,EAAEQ,YAAcP,EAAEO,WAE3Be,MAAK,CAACvB,EAASC,IACND,EAAEQ,YAAcP,EAAEO,WAE3BgB,UAAW0D,EAAGxF,MAEhBsB,OAAQ,CACNL,OAAM,CAACX,EAASC,IACPD,EAAEQ,YAAcP,EAAEO,WAE3Be,MAAK,CAACvB,EAASC,IACND,EAAEQ,YAAcP,EAAEO,WAE3BgB,UAAW0D,EAAGzF,MACdmC,KAAMsD,EAAG3E,aAGbkF,UAAW,CACTA,UAAW,CACT9E,OAAQuE,EAAGxF,KACX6B,MAAO2D,EAAGxF,KACV8B,UAAW0D,EAAGxF,KACdkC,KAAI,KACK,CACL1B,OAAQgF,EAAGtF,UAIjB8F,KAAM,CACJ/E,OAAQuE,EAAGxF,KACX6B,MAAO2D,EAAGxF,KACV8B,UAAW0D,EAAGxF,KACdkC,KAAI,KACK,CACL1B,OAAQgF,EAAGtF,OACXO,MAAO,SAKfuF,KAAM,CACJA,KAAM,CACJ/E,OAAQuE,EAAGxF,KACX6B,MAAO2D,EAAGxF,KACV8B,UAAW0D,EAAGxF,KACdkC,KAAI,KACK,CACL1B,OAAQgF,EAAGtF,OACXO,MAAO,SAKfwE,MAAO,CACLA,MAAO,CACLhE,OAAQuE,EAAG5C,QAAQ,CACjB3B,QAAQ,IAEVY,MAAO2D,EAAG5C,QAAQ,CAChBf,OAAO,IAETC,UAAW0D,EAAG5C,QAAQ,CACpBd,WAAW,IAEbI,KAAMsD,EAAG5C,QAAQ,CACfV,MAAM,KAGVZ,OAAQ,CACNL,OAAQuE,EAAGzE,SAAS,CAClBE,QAAQ,IAEVY,MAAO2D,EAAGzE,SAAS,CACjBc,OAAO,IAETC,UAAW0D,EAAGzE,SAAS,CACrBe,WAAW,IAEbI,KAAMsD,EAAGzE,SAAS,CAChBmB,MAAM,MAIZZ,OAAQ,CACNA,OAAQ,CAENL,OAAQuE,EAAGzE,SAAS,CAClBE,QAAQ,IAEVY,MAAO2D,EAAGzE,SAAS,CACjBc,OAAO,IAETC,UAAW0D,EAAGzE,SAAS,CACrBe,WAAW,IAEbI,KAAMsD,EAAGzE,SAAS,CAChBmB,MAAM,MAIZgE,SAAU,CACRA,SAAU,CACRjF,OAAM,CAACX,EAAaC,IACXD,IAAMC,EAEfsB,MAAK,CAACvB,EAAaC,IACVD,EAAEQ,YAAcP,EAAEO,WAE3BgB,UAAW0D,EAAGxF,KACdkC,KAAMsD,EAAG3E,aAIjB,C,4EC7cA,eAAgBiE,EAAID,EAA2BG,EAAcvE,GAC3D,GAAoB,iBAAToE,EAAmB,CAC5B,MAAMM,EAAQH,EAAKI,MAAM,KACzB,GAAIH,MAAMC,QAAQC,GAAQ,CACxB,MAAME,EAAOF,EAAMvB,QACfuB,EAAMvD,OAAS,GACZiD,EAAKQ,KACJK,OAAO6B,MAAM7B,OAAOP,EAAM,KAAMN,EAAKQ,GAAkB,CAAC,EACvDR,EAAKQ,GAAkB,IAE9BP,EAAID,EAAKQ,GAAiBF,EAAMG,KAAK,KAAM7E,IACtCoE,EAAKG,GAAkBvE,C,MAE9BoE,EAAKG,GAAkBvE,C,CAG7B,C,8EChBA,kBAAgB+G,EACd3C,EACA4C,EACAC,GAEA,MAAMlH,EAASiH,GAAW,CAAC,EACrBE,EAAWD,GAAa,GAC9B,IAAIhG,EACAC,EAEJ,GAAIsD,MAAMC,QAAQL,GAChB,IAAKnD,EAAI,EAAGC,EAAMkD,EAAKjD,OAAQF,EAAIC,EAAKD,GAAK,EAC3C8F,EAAO3C,EAAKnD,GAAIlB,GAASmH,EAAW,GAAGA,KAAc,IAAMjG,QAExD,GAAImD,GAAQA,EAAK+C,cAAgBtG,OAAQ,CAC9C,MAAMC,EAAOD,OAAOC,KAAKsD,GACzB,IAAKnD,EAAI,EAAGC,EAAMJ,EAAKK,OAAQF,EAAIC,EAAKD,GAAK,EAC3C8F,EAAO3C,EAAKtD,EAAKG,IAAKlB,GAASmH,EAAW,GAAGA,KAAc,IAAMpG,EAAKG,G,MAGxElB,EAAOmH,GAAY9C,EAErB,OAAOrE,CACT,C,8ECvBA,iBAAgBqH,EAAMhD,EAA2BG,GAC/C,GAAIC,MAAMC,QAAQL,GAChB,IAAK,IAAInD,EAAI,EAAGC,EAAMkD,EAAKjD,OAAQF,EAAIC,EAAKD,GAAK,EAC/CmG,EAAMhD,EAAKnD,GAAIsD,QAEZ,GAAoB,iBAATH,EAChB,QAAmBzB,IAAfyB,EAAKG,GAAqB,CAC5B,MAAMG,EAAQH,EAAKI,MAAM,KACzB,GAAIH,MAAMC,QAAQC,GAAQ,CACxB,MAAME,EAAOF,EAAMvB,QACfuB,EAAMvD,OAAS,EACjBiG,EAAMhD,EAAKQ,GAAiBF,EAAMG,KAAK,aAEhCT,EAAKQ,E,cAITR,EAAKG,EAGlB,C,UCpBA8C,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqB/E,IAAjBgF,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAM,EAAoBF,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,mLCtBA,aACE,uDAAAhD,IAAA,oBAAAd,aAAa,IACb,0EAAAQ,QAAQ,IACR,yEAAAE,OAAO,IACP,6EAAAC,WAAW,IACX,sEAAA1C,IAAI,IAGN,aAAS,sEAAAoG,IAAI,IACb,YAAS,wEAAAd,MAAM,IACf,aAAS,6CAAAzC,IAAA,oBAAAA,GAAG,IACZ,aAAS,qEAAAD,GAAG,IACZ,aAAS,uEAAA+C,KAAK,IACd,aAAS,qEAAAtC,GAAG,G","sources":["webpack://comparator.js/./src/comparator.ts","webpack://comparator.js/./src/fold.ts","webpack://comparator.js/./src/get.ts","webpack://comparator.js/./src/has.ts","webpack://comparator.js/./src/mapping.ts","webpack://comparator.js/./src/set.ts","webpack://comparator.js/./src/unfold.ts","webpack://comparator.js/./src/unset.ts","webpack://comparator.js/external commonjs \"diff\"","webpack://comparator.js/webpack/bootstrap","webpack://comparator.js/./src/index.ts"],"sourcesContent":["//@ts-nocheck\nexport type EqConfig = {\n  strict?: boolean\n  loose?: boolean\n  structure?: boolean\n  diff?: boolean\n}\n\nexport type Result<T> = {\n  [key: string]: any\n  result?: T\n}\n\nexport type ComparatorFunction = (a: any, b: any) => DiffResult\n\nexport enum EqResult {\n  NOT_EQUAL = 0,\n  STRICT = 1,\n  LOOSE = 2,\n  STRUCTURE = 3,\n}\n\nexport interface DiffResult extends Record<string, any> {\n  result?: EqResult\n  value?: any\n  from?: any\n  to?: any\n  reorder?: boolean\n  removed?: Record<string, { order: number; value: any }>\n  inserted?: Record<string, { order: number; value: any }>\n  changeRating?: number\n}\n\nexport interface EqualityIput {\n  false: () => boolean\n  true: () => boolean\n  NOT_EQUAL: EqResult.NOT_EQUAL\n  STRICT: EqResult.STRICT\n  LOOSE: EqResult.LOOSE\n  STRUCTURE: EqResult.STRUCTURE\n  diffString: (a: string, b: string) => boolean | DiffResult\n  eqObject: (config: EqConfig) => boolean | DiffResult\n  eqArray: (config: EqConfig) => boolean | DiffResult\n}\n\nexport const Equality = {\n  false: () => false,\n  true: () => true,\n  NOT_EQUAL: 0,\n  STRICT: 1,\n  LOOSE: 2,\n  STRUCTURE: 3,\n\n  diffValue: (a: any, b: any): DiffResult => {\n    if (a === b)\n      return {\n        result: Equality.STRICT,\n        value: b,\n      }\n    if (a != null && b != null && a.valueOf() === b.valueOf())\n      return {\n        result: Equality.LOOSE,\n        from: a,\n        to: b,\n      }\n    return {\n      result: Equality.NOT_EQUAL,\n      from: a,\n      to: b,\n    }\n  },\n\n  diffString: (a: string, b: string) => {\n    if (a === b)\n      return {\n        result: Equality.STRICT,\n        value: b,\n      }\n    if (a.toString() == b.toString())\n      return {\n        result: Equality.LOOSE,\n        from: a,\n        to: b,\n      }\n    return {\n      result: Equality.NOT_EQUAL,\n      from: a,\n      to: b,\n    }\n  },\n\n  // diff содержит только поля которые изменились ??\n  // eslint-disable-next-line consistent-return\n  eqObject: (config: EqConfig) => {\n    if (config.strict) {\n      // строгое равенство структура + данные\n      return (source: any, dest: any, compare: ComparatorFunction) => {\n        if (source == dest) return true\n        const ks = Object.keys(source)\n        const kd = Object.keys(dest)\n        let key\n        const so = ks.toString() == kd.toString()\n        if (so) {\n          for (let i = 0, len = ks.length; i < len; i += 1) {\n            key = ks[i]\n            if (!compare(source[key], dest[key])) return false\n          }\n        } else {\n          return false\n        }\n        return true\n      }\n    }\n\n    if (config.loose) {\n      // второй объект может содержать дополнительные поля, но мы их не рассматриваем.\n      // структура и равенство*(compare) того что есть с тем что дали\n      return (source: any, dest: any, compare: ComparatorFunction) => {\n        if (source == dest) return true\n        const ks = Object.keys(source)\n        let key\n        for (let i = 0, len = ks.length; i < len; i += 1) {\n          key = ks[i]\n          if (!compare(source[key], dest[key])) {\n            return false\n          }\n        }\n        return true\n      }\n    }\n\n    if (config.structure) {\n      // проверяем что структура объекта такая же\n      // второй объект может содержать новые поля,\n      // и новые данные, но структура та же\n      return (source: any, dest: any, compare: ComparatorFunction) => {\n        if (source == dest) return true\n        const ks = Object.keys(source)\n        const kd = Object.keys(dest)\n        let i\n        let len\n        let key\n        if (ks.length > kd.length) return false\n        const so = ks.toString() == kd.toString()\n        if (so) {\n          for (i = 0, len = ks.length; i < len; i += 1) {\n            key = ks[i]\n            if (!compare(source[key], dest[key])) return false\n          }\n        } else {\n          const ksd = Object.keys(source).sort()\n          const passed: Record<string, any> = {}\n          for (i = 0, len = ksd.length; i < len; i += 1) {\n            key = ksd[i]\n            passed[key] = 1\n            if (!compare(source[key], dest[key])) return false\n          }\n          if (Object.keys(passed).sort().toString() != ksd.toString())\n            return false\n        }\n        return true\n      }\n    }\n\n    if (config.diff) {\n      // full processing\n      // здесь мы должны получить все варианты сразу\n      // strict\n      // loose\n      // structure\n      // diff\n      return (source: any, dest: any, compare: ComparatorFunction) => {\n        if (source == dest)\n          return {\n            result: 1,\n            value: dest,\n          }\n        const result: Result<any> = {}\n        let i\n        let len\n        let key\n        let ret\n        const ks = Object.keys(source)\n        const kd = Object.keys(dest)\n        const so = ks.toString() == kd.toString()\n        if (so) {\n          result.result = 1\n          for (i = 0, len = ks.length; i < len; i += 1) {\n            key = ks[i]\n            result[key] = compare(source[key], dest[key])\n            ret = result[key]\n            if (ret.result === 0) ret.result = 3\n            if (ret.result > 0 && result.result < ret.result)\n              result.result = ret.result\n          }\n        } else {\n          result.result = 1\n          const ksd = Object.keys(source).sort()\n          const kss = Object.keys(dest).sort()\n          result.reorder = ks.toString() != kd.toString()\n          const passed: Record<string, any> = {}\n          let srcI\n          let dstI\n          for (i = 0, len = ksd.length; i < len; i += 1) {\n            key = ksd[i]\n            passed[key] = true\n            srcI = ks.indexOf(key)\n            dstI = kd.indexOf(key)\n            if (dstI >= 0) {\n              result[key] = {}\n              if (srcI != dstI)\n                result[key].order = {\n                  from: ks.indexOf(key),\n                  to: kd.indexOf(key),\n                }\n              result[key].value = compare(source[key], dest[key])\n              ret = result[key].value\n              if (ret.result === 0) ret.result = 3\n              // structure of current object isn't changed\n              if (ret.result > 0 && result.result < ret.result)\n                result.result = ret.result\n            } else {\n              // removed items\n              result.result = 0\n              if (!result.removed) result.removed = {}\n              result.removed[key] = {\n                order: ks.indexOf(key),\n                value: source[key],\n              }\n            }\n          }\n          // new items\n          for (i = 0, len = kss.length; i < len; i += 1) {\n            key = kss[i]\n            if (passed[key] !== true) {\n              // if (result.result > 0) result.result = 2;\n              passed[key] = true\n              if (!result.inserted) result.inserted = {}\n              result.inserted[key] = {\n                order: kd.indexOf(key),\n                value: dest[key],\n              }\n            }\n          }\n        }\n        return result\n      }\n    }\n  },\n\n  eqArray: (config: EqConfig) => {\n    // strict -- полное равенство\n    // loose -- объекты перемешаны, пересортированы, но все на месте\n    // structure -- объекты на своих местах и каждый имеет свою структуру.\n    // diff\n    // diff reorder массивы простых значений только если\n    // нужно придумать условия\n    // 1. когда длинна одинаковая\n    // 2. когда меншье стала\n    // 3. когда больше стала\n    // или забить :)\n    // сделать для каждого типа свою функцию как в объекте\n    if (config.strict || config.structure) {\n      return (source: any, dest: any, compare: ComparatorFunction) => {\n        if (source == dest)\n          return {\n            result: 1,\n            value: dest,\n          }\n        if (source && dest && source.length == dest.length) {\n          for (let i = 0, len = source.length; i < len; i += 1) {\n            if (!compare(source[i], dest[i])) return false\n          }\n          return true\n        }\n        return false\n      }\n    }\n    if (config.loose) {\n      return (source: any, dest: any, compare: ComparatorFunction) => {\n        if (source == dest)\n          return {\n            result: 1,\n            value: dest,\n          }\n        let val\n        let i\n        let len\n        const foundItems: Array<any> = []\n        foundItems.length =\n          source.length > dest.length ? source.length : dest.length\n        if (source && dest && source.length <= dest.length) {\n          for (i = 0, len = source.length; i < len; i += 1) {\n            val = source[i]\n            let rec\n            let cmpRes\n            let found\n            for (let j = 0, dstlen = dest.length; j < dstlen; j += 1) {\n              rec = dest[j]\n              cmpRes = compare(val, rec)\n              if (cmpRes) {\n                found = rec\n                if (!foundItems[j]) break\n              } else {\n                found = undefined\n              }\n            }\n            if (!found) return false\n          }\n          return true\n        }\n        return false\n      }\n    }\n    if (config.diff) {\n      return (source: any, dest: any, compare: ComparatorFunction) => {\n        if (source == dest) {\n          return {\n            result: 1,\n            value: dest,\n          }\n        }\n\n        if (JSON.stringify(source) == JSON.stringify(dest)) {\n          return {\n            result: 1,\n            value: dest,\n          }\n        }\n        const result: DiffResult = {\n          result: 1,\n          reorder: true,\n        }\n\n        function compareRatings(a: DiffResult, b: DiffResult) {\n          return a?.cmpRes.changeRating - b.cmpRes.changeRating\n        }\n\n        let val\n        let i\n        let len\n        const foundItems = []\n        foundItems.length =\n          source.length > dest.length ? source.length : dest.length\n        let srcI\n        let dstI\n        for (i = 0, len = source.length; i < len; i += 1) {\n          val = source[i]\n          let rec\n          let cmpRes\n          let found\n          const approx: Array<{\n            found: any\n            dstI: number\n            cmpRes: DiffResult\n          }> = []\n          for (let j = 0, dstlen = dest.length; j < dstlen; j += 1) {\n            rec = dest[j]\n            cmpRes = compare(val, rec)\n            if (\n              cmpRes.result == EqResult.STRICT ||\n              cmpRes.result == EqResult.LOOSE\n            ) {\n              found = rec\n              dstI = dest.indexOf(rec)\n              if (!foundItems[j]) break\n            } else if (cmpRes.result === 3) {\n              approx.push({\n                found: rec,\n                dstI: dest.indexOf(rec),\n                cmpRes,\n              })\n            } else {\n              found = undefined\n              dstI = -1\n            }\n          }\n          srcI = source.indexOf(val)\n\n          if (!found && approx.length > 0) {\n            // debugger\n            approx.sort(compareRatings)\n            const aFound = approx.shift()\n            found = aFound.found\n            dstI = aFound.dstI\n            cmpRes = aFound.cmpRes\n            approx.length = 0\n          }\n\n          if (found) {\n            result[i] = {}\n            if (srcI != dstI) {\n              result[i].order = {\n                from: srcI,\n                to: dstI,\n              }\n            }\n            foundItems[dstI] = true\n            result[i].value = cmpRes\n            if (cmpRes?.result && cmpRes.result > 1 && result.result !== 0)\n              result.result = cmpRes?.result\n          } else {\n            result.result = 0\n            if (!result.removed) result.removed = {}\n            result.removed[i] = {\n              order: dstI,\n              value: val,\n            }\n          }\n        }\n        for (i = 0, len = dest.length; i < len; i += 1) {\n          val = dest[i]\n          if (foundItems[i] !== true) {\n            if (!result.inserted) result.inserted = {}\n            // if (result.result > 0) result.result = 2;\n            result.inserted[i] = {\n              order: i,\n              value: val,\n            }\n          }\n        }\n\n        if (!config.diff) {\n          // let res = true\n          // for (const v in result) {\n          //   res = res && result[v]\n          //   if (!res) break\n          // }\n          // return res\n          return Object.keys(result).every(v => result[v])\n        }\n        return result\n      }\n    }\n  },\n}\n\n/*\n\t0 - notEqual,\n\t1 - strict\n\t2 - loose\n\t3 - structure\n*/\n\n// eslint-disable-next-line no-unused-vars\n\nimport { cmp } from './mapping'\n\nconst Compariable = cmp(Equality)\n\n// eslint-disable-next-line consistent-return\nexport function getComparator(\n  a: any,\n  b: any,\n  type: 'strict' | 'loose' | 'structure' | 'diff',\n) {\n  let cmpr = Compariable[a][b]\n  let res = cmpr ? cmpr[type] : null\n  if (!res) {\n    cmpr = Compariable[b][a]\n    res = cmpr ? cmpr[type] : null\n  }\n  if (!res) {\n    // eslint-disable-next-line default-case\n    switch (type) {\n      case 'strict':\n        return Equality.false\n      case 'loose':\n        return Equality.false\n      case 'structure':\n        return Equality.false\n      case 'diff':\n        return Equality.diffValue\n    }\n  } else return res\n}\n\nexport function getType(v: any) {\n  //@ts-ignore\n  return Object.prototype.toString.call(v).match(/\\[object (.+)\\]/)[1]\n}\n\nexport function strictEq(a: any, b: any) {\n  const t0 = getType(a)\n  const t1 = getType(b)\n  const fnc = getComparator(t0, t1, 'strict')\n  return fnc(a, b, strictEq)\n}\n\nexport function looseEq(a: any, b: any) {\n  const t0 = getType(a)\n  const t1 = getType(b)\n  const fnc = getComparator(t0, t1, 'loose')\n  return fnc(a, b, looseEq)\n}\n\nexport function structureEq(a: any, b: any) {\n  const t0 = getType(a)\n  const t1 = getType(b)\n  const fnc = getComparator(t0, t1, 'structure')\n  return fnc(a, b, structureEq)\n}\n\nexport function diff(a: any, b: any) {\n  const t0 = getType(a)\n  const t1 = getType(b)\n  const fnc = getComparator(t0, t1, 'diff')\n  return fnc(a, b, diff)\n}\n","import { set } from './set'\n\nexport function fold<T extends Record<string, any>>(data: T):Record<string, any> {\n  const result = {}\n  const keys = Object.keys(data)\n  for (let i = 0, len = keys.length; i < len; i += 1) {\n    set(result, keys[i], data[keys[i]])\n  }\n  return result\n}\n","export function get<T extends Record<string, any>, R>(data: T, path: string): R\nexport function get<T extends Record<string, any>, R>(\n  data: Array<T>,\n  path: string,\n): Array<R>\nexport function get<T extends Record<string, any>>(data: T, path: string) {\n  if (Array.isArray(data)) {\n    const result = []\n    for (let i = 0, len = data.length; i < len; i += 1) {\n      result.push(get(data[i], path))\n    }\n    return result\n  }\n  if (typeof data === 'object') {\n    if (data[path] === undefined) {\n      const parts = path.split('.')\n      if (Array.isArray(parts)) {\n        const curr = parts.shift()\n        if (parts.length > 0) {\n          return get(data[curr as string], parts.join('.'))\n        }\n        return data[curr as string]\n      }\n    }\n    return data[path]\n  }\n  return data\n}\n","export function has<T extends Record<string, any>>(\n  data: T,\n  path: string,\n): boolean\nexport function has<T extends Record<string, any>>(\n  data: Array<T>,\n  path: string,\n): Array<boolean>\nexport function has<T extends Record<string, any>>(\n  data: T | Array<T>,\n  path: string,\n) {\n  if (Array.isArray(data)) {\n    const result = []\n    for (let i = 0, len = data.length; i < len; i += 1) {\n      result.push(has(data[i], path))\n    }\n    return result\n  } else if (typeof data === 'object') {\n    if (data[path] === undefined) {\n      const parts = path.split('.')\n      if (Array.isArray(parts)) {\n        const curr = parts.shift()\n        if (parts.length > 0) {\n          return has(data[curr as string], parts.join('.'))\n        }\n        return (curr as string) in data\n      }\n    } else {\n      return path in data\n    }\n  } else return true\n}\n","/* eslint-disable eqeqeq */\n\n// default strict = eq.false;\n// default loose = eq.false;\n// default structure = eq.false;\n// default diff =eq.diffValue\n\n// проверить работу, посде доделать адресно для каждого типа\n// так чтобы знать какой параметр каким приходит\n// чтобы было меньше проверок\n\nimport { diffLines } from 'diff'\nimport { EqualityIput } from './comparator'\n\nexport function cmp(eq: EqualityIput) {\n  return {\n    Boolean: {\n      Boolean: {\n        strict(a: boolean, b: boolean) {\n          return a === b\n        },\n        loose(a: boolean, b: boolean) {\n          return a == b\n        },\n        structure: eq.true,\n      },\n      Number: {\n        loose(a: boolean, b: number) {\n          return a == !!b\n        },\n      },\n      String: {\n        loose(a: boolean, b: string) {\n          const bFalse = /false/i.test(b) || /0/.test(b)\n          const bTrue = /true/i.test(b) || /1/.test(b)\n          if (a) return a === bTrue\n          return a === !bFalse\n        },\n        diff(a: boolean, b: string) {\n          let res\n          const bFalse = /false/i.test(b) || /0/.test(b)\n          const bTrue = /true/i.test(b) || /1/.test(b)\n          if (a) res = a === bTrue\n          else res = a === !bFalse\n          if (res)\n            return {\n              result: eq.LOOSE,\n              from: a,\n              to: b,\n            }\n          return {\n            result: eq.NOT_EQUAL,\n            from: a,\n            to: b,\n          }\n        },\n      },\n      Undefined: {\n        loose(a: boolean, b: undefined) {\n          return !a == !b\n        },\n      },\n      Null: {\n        loose(a: boolean, b: null) {\n          return !a == !b\n        },\n      },\n    },\n    Number: {\n      Number: {\n        strict(a: number, b: number) {\n          return a === b\n        },\n        loose(a: number, b: number) {\n          return a == b\n        },\n        structure: eq.true,\n      },\n      String: {\n        loose(a: number, b: string) {\n          return a == +b\n        },\n      },\n      Date: {\n        strict(a: number, b: Date) {\n          return a === b.valueOf()\n        },\n        loose(a: number, b: Date) {\n          return a.valueOf() == b.valueOf()\n        },\n        structure: eq.true,\n      },\n      Null: {\n        loose(a: number, b: null) {\n          return !a == !b\n        },\n      },\n      Undefined: {\n        loose(a: number, b: undefined) {\n          return !a == !b\n        },\n      },\n      Object: {\n        loose(a: number, b: object) {\n          return a.toString() == b.toString()\n        },\n      },\n      Function: {\n        loose(a: number, b: Function) {\n          return a.toString() == b.toString()\n        },\n      },\n    },\n    String: {\n      Boolean: {\n        loose(a: string, b: boolean) {\n          const aFalse = /false/i.test(a) || /0/.test(a)\n          const aTrue = /true/i.test(a) || /1/.test(a)\n          if (b) return b === aTrue\n          return b === !aFalse\n        },\n        diff(a: string, b: boolean) {\n          let res\n          const aFalse = /false/i.test(a) || /0/.test(a)\n          const aTrue = /true/i.test(a) || /1/.test(a)\n          if (b) res = b === aTrue\n          else res = b === !aFalse\n          if (res)\n            return {\n              result: eq.LOOSE,\n              from: a,\n              to: b,\n            }\n          return {\n            result: eq.NOT_EQUAL,\n            from: a,\n            to: b,\n          }\n        },\n      },\n      String: {\n        strict(a: string, b: string) {\n          return a == b\n        },\n        loose(a: string, b: string) {\n          return a == b\n        },\n        structure: eq.true,\n        diff(a: string, b: string) {\n          if (a == b)\n            return {\n              result: 1,\n              value: b,\n            }\n\n          const result = WEB\n            ? [{ added: b, removed: a, value: a }]\n            : diffLines(a, b)\n          const srcLen = a.length\n          const dstLen = b.length\n          let unchangedCnt = 0\n          let removedCnt = 0\n          let removedLen = 0\n          let addedCnt = 0\n          let addedLen = 0\n\n          result.forEach(part => {\n            if (part.added) {\n              addedCnt += 1\n              addedLen += part.value.length\n            } else if (part.removed) {\n              removedCnt += 1\n              removedLen += part.value.length\n            } else {\n              unchangedCnt += 1\n              // unchangedLen += part.value.length\n            }\n          })\n          if (unchangedCnt === 1 && addedCnt === 0 && removedCnt === 0) {\n            return {\n              result: eq.LOOSE,\n              diff: 'lines',\n              changes: result,\n            }\n          }\n          if (unchangedCnt > 0 && (addedCnt > 0 || removedCnt > 0)) {\n            return {\n              result: eq.STRUCTURE,\n              diff: 'lines',\n              changes: result,\n              /* srcLen: ((addedLen > removedLen) ? dstLen : srcLen),\n\t\t\t\t\t\t\tremovedLen: removedLen,\n\t\t\t\t\t\t\taddedLen: addedLen, */\n              changeRating:\n                Math.abs(addedLen - removedLen) /\n                (addedLen > removedLen ? dstLen : srcLen),\n            }\n          }\n\n          return {\n            result: eq.NOT_EQUAL,\n            diff: 'lines',\n            from: a,\n            to: b,\n          }\n        },\n      },\n      RegExp: {\n        strict(a: string, b: RegExp) {\n          return a == b.source\n        },\n        loose(a: string, b: string) {\n          return a.toString() == b.toString()\n        },\n        structure: eq.false,\n      },\n      Date: {\n        strict(a: string, b: Date) {\n          if (a.toString() == b.toString()) return true\n\n          if (b.toJSON) {\n            let v0\n            let v1\n            v0 = a\n\n            if (b.toJSON) v1 = b.toJSON()\n            else v1 = b.toString()\n            return v0 == v1\n          }\n          return false\n        },\n        loose(a: string, b: Date) {\n          if (a.toString() == b.toString()) return true\n\n          if (b.toJSON) {\n            let v0\n            let v1\n            v0 = a\n            if (b.toJSON) v1 = b.toJSON()\n            else v1 = a.toString()\n            return v0 == v1\n          }\n          return false\n        },\n        structure: eq.true,\n        diff(a: string, b: Date) {\n          if (a.toString() == b.toString())\n            return {\n              result: eq.STRICT,\n              value: b.toString(),\n            }\n\n          if (b.toJSON) {\n            let v0\n            let v1\n            v0 = a\n            if (b.toJSON) v1 = b.toJSON()\n            else v1 = b.toString()\n\n            if (v0 == v1)\n              return {\n                result: eq.LOOSE,\n                from: a,\n                to: b,\n              }\n          }\n\n          return {\n            result: eq.NOT_EQUAL,\n            from: a,\n            to: b,\n          }\n        },\n      },\n      Null: {\n        loose(a: string, b: null) {\n          return !a == !b\n        },\n      },\n      Undefined: {\n        loose(a: string, b: undefined) {\n          return !a == !b\n        },\n      },\n      Array: {\n        strict(a: string, b: Array<any>) {\n          return a == b.join()\n        },\n        loose(a: string, b: Array<any>) {\n          return a == b.join()\n        },\n        structure: eq.true,\n      },\n      Object: {\n        strict(a: string, b: object) {\n          return a.toString() == b.toString()\n        },\n        loose(a: string, b: object) {\n          return a.toString() == b.toString()\n        },\n        structure: eq.false,\n      },\n      Function: {\n        strict(a: string, b: Function) {\n          return a.toString() == b.toString()\n        },\n        loose(a: string, b: Function) {\n          return a.toString() == b.toString()\n        },\n        structure: eq.true,\n      },\n    },\n    RegExp: {\n      // ввести сравнение регулярок с json версией mongoosejs\n      RegExp: {\n        strict(a: RegExp, b: RegExp) {\n          return a === b\n        },\n        loose(a: RegExp, b: RegExp) {\n          return a.toString() == b.toString()\n        },\n        structure: eq.true,\n        diff: eq.diffString,\n      },\n      Undefined: {\n        loose(a: RegExp, b: undefined) {\n          return a.test('undefined')\n        },\n      },\n      Null: {\n        loose(a: RegExp, b: null) {\n          return a.test('null')\n        },\n      },\n      Object: {\n        strict(a: RegExp, b: string) {\n          return a.toString() == b.toString()\n        },\n        loose(a: RegExp, b: string) {\n          return a.toString() == b.toString()\n        },\n      },\n    },\n    Date: {\n      Date: {\n        strict(a: Date, b: Date) {\n          if (a === b) return true\n          return a.toString() == b.toString()\n        },\n        loose(a: Date, b: Date) {\n          return a.toString() == b.toString()\n        },\n        structure: eq.true,\n      },\n      Object: {\n        strict(a: Date, b: object) {\n          return a.toString() == b.toString()\n        },\n        loose(a: Date, b: object) {\n          return a.toString() == b.toString()\n        },\n        structure: eq.false,\n        diff: eq.diffString,\n      },\n    },\n    Undefined: {\n      Undefined: {\n        strict: eq.true,\n        loose: eq.true,\n        structure: eq.true,\n        diff() {\n          return {\n            result: eq.STRICT,\n          }\n        },\n      },\n      Null: {\n        strict: eq.true,\n        loose: eq.true,\n        structure: eq.true,\n        diff() {\n          return {\n            result: eq.STRICT,\n            value: null,\n          }\n        },\n      },\n    },\n    Null: {\n      Null: {\n        strict: eq.true,\n        loose: eq.true,\n        structure: eq.true,\n        diff() {\n          return {\n            result: eq.STRICT,\n            value: null,\n          }\n        },\n      },\n    },\n    Array: {\n      Array: {\n        strict: eq.eqArray({\n          strict: true,\n        }),\n        loose: eq.eqArray({\n          loose: true,\n        }),\n        structure: eq.eqArray({\n          structure: true,\n        }),\n        diff: eq.eqArray({\n          diff: true,\n        }),\n      },\n      Object: {\n        strict: eq.eqObject({\n          strict: true,\n        }),\n        loose: eq.eqObject({\n          loose: true,\n        }),\n        structure: eq.eqObject({\n          structure: true,\n        }),\n        diff: eq.eqObject({\n          diff: true,\n        }),\n      },\n    },\n    Object: {\n      Object: {\n        // возможно нужны будут Другие операции\n        strict: eq.eqObject({\n          strict: true,\n        }),\n        loose: eq.eqObject({\n          loose: true,\n        }),\n        structure: eq.eqObject({\n          structure: true,\n        }),\n        diff: eq.eqObject({\n          diff: true,\n        }),\n      },\n    },\n    Function: {\n      Function: {\n        strict(a: Function, b: Function) {\n          return a === b\n        },\n        loose(a: Function, b: Function) {\n          return a.toString() == b.toString()\n        },\n        structure: eq.true,\n        diff: eq.diffString,\n      },\n    },\n  }\n}\n","export function set(data: Record<string, any>, path: string, value: any) {\n  if (typeof data === 'object') {\n    const parts = path.split('.')\n    if (Array.isArray(parts)) {\n      const curr = parts.shift()\n      if (parts.length > 0) {\n        if (!data[curr as string]) {\n          if (Number.isNaN(Number(parts[0]))) data[curr as string] = {}\n          else data[curr as string] = []\n        }\n        set(data[curr as string], parts.join('.'), value)\n      } else data[path as string] = value\n    } else {\n      data[path as string] = value\n    }\n  }\n}\n","export function unfold(\n  data: Record<string, any>,\n  _result?: Record<string, any>,\n  _propName?: string,\n) {\n  const result = _result || {}\n  const propName = _propName || ''\n  let i\n  let len\n\n  if (Array.isArray(data)) {\n    for (i = 0, len = data.length; i < len; i += 1) {\n      unfold(data[i], result, (propName ? `${propName}.` : '') + i)\n    }\n  } else if (data && data.constructor === Object) {\n    const keys = Object.keys(data)\n    for (i = 0, len = keys.length; i < len; i += 1) {\n      unfold(data[keys[i]], result, (propName ? `${propName}.` : '') + keys[i])\n    }\n  } else {\n    result[propName] = data\n  }\n  return result\n}\n","export function unset(data: Record<string, any>, path: string) {\n  if (Array.isArray(data)) {\n    for (let i = 0, len = data.length; i < len; i += 1) {\n      unset(data[i], path)\n    }\n  } else if (typeof data === 'object') {\n    if (data[path] === undefined) {\n      const parts = path.split('.')\n      if (Array.isArray(parts)) {\n        const curr = parts.shift()\n        if (parts.length > 0) {\n          unset(data[curr as string], parts.join('.'))\n        } else {\n          delete data[curr as string]\n        }\n      }\n    } else {\n      delete data[path]\n    }\n  }\n}\n","module.exports = require(\"diff\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export {\n  getComparator,\n  strictEq,\n  looseEq,\n  structureEq,\n  diff,\n} from './comparator'\n\nexport { fold } from './fold'\nexport { unfold } from './unfold'\nexport { get } from './get'\nexport { set } from './set'\nexport { unset } from './unset'\nexport { has } from './has'\n"],"names":["EqResult","Equality","false","true","NOT_EQUAL","STRICT","LOOSE","STRUCTURE","diffValue","a","b","result","value","valueOf","from","to","diffString","toString","eqObject","config","strict","source","dest","compare","ks","Object","keys","kd","key","i","len","length","loose","structure","ksd","sort","passed","diff","ret","kss","reorder","srcI","dstI","indexOf","order","removed","inserted","eqArray","val","foundItems","rec","cmpRes","found","j","dstlen","undefined","JSON","stringify","compareRatings","changeRating","approx","push","aFound","shift","every","v","Compariable","cmp","getComparator","type","cmpr","res","getType","prototype","call","match","strictEq","fnc","looseEq","structureEq","data","set","get","path","Array","isArray","parts","split","curr","join","has","eq","Boolean","Number","String","bFalse","test","bTrue","Undefined","Null","Date","Function","aFalse","aTrue","diffLines","srcLen","dstLen","unchangedCnt","removedCnt","removedLen","addedCnt","addedLen","forEach","part","added","changes","Math","abs","RegExp","toJSON","v0","v1","isNaN","unfold","_result","_propName","propName","constructor","unset","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","fold"],"sourceRoot":""}